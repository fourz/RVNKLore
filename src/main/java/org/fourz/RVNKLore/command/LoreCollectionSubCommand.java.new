package org.fourz.RVNKLore.command;

import org.bukkit.ChatColor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.fourz.RVNKLore.RVNKLore;
import org.fourz.RVNKLore.command.output.DisplayFactory;
import org.fourz.RVNKLore.command.subcommand.SubCommand;
import org.fourz.RVNKLore.data.DatabaseManager;
import org.fourz.RVNKLore.data.dto.ItemCollectionDTO;
import org.fourz.RVNKLore.data.repository.CollectionRepository;
import org.fourz.RVNKLore.debug.LogManager;
import org.fourz.RVNKLore.lore.item.collection.CollectionManager;
import org.fourz.RVNKLore.lore.item.collection.CollectionTheme;
import org.fourz.RVNKLore.lore.item.collection.ItemCollection;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * Sub-command for managing and viewing item collections.
 * Provides player-facing interface for browsing collections and checking progress.
 * Uses async database operations for all data access.
 */
public class LoreCollectionSubCommand implements SubCommand {
    private final RVNKLore plugin;
    private final LogManager logger;
    private final DatabaseManager databaseManager;
    private final CollectionRepository collectionRepository;
    private final Map<String, SubCommand> subCommands = new HashMap<>();
    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd");

    public LoreCollectionSubCommand(RVNKLore plugin) {
        this.plugin = plugin;
        this.logger = LogManager.getInstance(plugin, "LoreCollectionSubCommand");
        this.databaseManager = plugin.getDatabaseManager();
        this.collectionRepository = databaseManager.getCollectionRepository();
        
        // Register sub-commands
        subCommands.put("add", new LoreCollectionAddSubCommand(plugin));
        subCommands.put("list", new LoreCollectionListSubCommand(plugin));
    }

    @Override
    public boolean hasPermission(CommandSender sender) {
        // Only allow players with the base collection permission or admin
        return sender.hasPermission("rvnklore.command.collection") || sender.hasPermission("rvnklore.admin");
    }

    @Override
    public boolean execute(CommandSender sender, String[] args) {
        // Check if the first argument is a registered subcommand
        if (args.length > 0 && subCommands.containsKey(args[0].toLowerCase())) {
            String subCommandName = args[0].toLowerCase();
            SubCommand subCommand = subCommands.get(subCommandName);
            
            if (subCommand.hasPermission(sender)) {
                return subCommand.execute(sender, Arrays.copyOfRange(args, 1, args.length));
            } else {
                sender.sendMessage(ChatColor.RED + "✖ You don't have permission to use this command");
                return true;
            }
        }

        // If not a subcommand, handle with existing logic
        if (!hasPermission(sender)) {
            sender.sendMessage(ChatColor.RED + "✖ You don't have permission to use this command");
            return true;
        }
        
        if (!(sender instanceof Player)) {
            sender.sendMessage(ChatColor.RED + "▶ This command can only be used by players");
            return true;
        }
        
        Player player = (Player) sender;
        
        if (args.length == 0) {
            showCollectionOverview(player);
            return true;
        }
        
        String sub = args[0].toLowerCase();
        
        switch (sub) {
            case "view":
                if (args.length < 2) {
                    sender.sendMessage(ChatColor.RED + "▶ Usage: /lore collection view <collection_id>");
                    return true;
                }
                String collectionId = args[1];
                viewCollection(player, collectionId);
                return true;
                
            case "claim":
                if (args.length < 2) {
                    sender.sendMessage(ChatColor.RED + "▶ Usage: /lore collection claim <collection_id>");
                    return true;
                }
                claimCollectionReward(player, args[1]);
                return true;
                
            case "list":
                // Use async reload and display logic
                if (args.length > 1) {
                    String themeFilter = args[1];
                    listCollections(player, themeFilter);
                } else {
                    listCollections(player, null);
                }
                return true;
                
            case "progress":
                showProgress(player);
                return true;
                
            case "theme":
                if (args.length > 1) {
                    showThemeCollections(player, args[1]);
                } else {
                    listThemes(player);
                }
                return true;
                
            default:
                sender.sendMessage(ChatColor.RED + "✖ Unknown subcommand: " + sub);
                showUsage(player);
                return true;
        }
    }

    /**
     * Show general overview of collections and player's progress.
     */
    private void showCollectionOverview(Player player) {
        player.sendMessage(ChatColor.YELLOW + "⚙ " + ChatColor.BOLD + "Collections Overview");
        player.sendMessage("");
        
        // Get all collections and calculate progress asynchronously
        collectionRepository.getPlayerCollections(player.getUniqueId())
            .thenAccept(collections -> {
                if (collections.isEmpty()) {
                    player.sendMessage(ChatColor.YELLOW + "⚠ No collections available");
                    return;
                }
                
                int totalCollections = collections.size();
                long completedCollections = collections.stream()
                    .filter(c -> c.getProgress() >= 1.0)
                    .count();
                
                player.sendMessage(ChatColor.GREEN + "✓ Completed Collections: " + 
                    ChatColor.WHITE + completedCollections + ChatColor.GRAY + "/" + 
                    ChatColor.WHITE + totalCollections);
                
                double overallProgress = collections.stream()
                    .mapToDouble(ItemCollectionDTO::getProgress)
                    .average()
                    .orElse(0.0);
                
                player.sendMessage(ChatColor.YELLOW + "⚠ Overall Progress: " + 
                    ChatColor.WHITE + String.format("%.1f%%", overallProgress * 100));
                
                player.sendMessage("");
                player.sendMessage(ChatColor.GRAY + "   Use " + ChatColor.WHITE + "/lore collection list " + 
                    ChatColor.GRAY + "to see all collections");
                player.sendMessage(ChatColor.GRAY + "   Use " + ChatColor.WHITE + "/lore collection progress " + 
                    ChatColor.GRAY + "for detailed progress");
                player.sendMessage(ChatColor.GRAY + "   Use " + ChatColor.WHITE + "/lore collection theme " + 
                    ChatColor.GRAY + "to browse by theme");
            })
            .exceptionally(e -> {
                logger.error("Error fetching collection overview for player: " + player.getName(), e);
                player.sendMessage(ChatColor.RED + "✖ Error retrieving collection data.");
                return null;
            });
    }

    /**
     * List available collections, optionally filtered by theme.
     */
    private void listCollections(Player player, String themeFilter) {
        CompletableFuture<List<ItemCollectionDTO>> collectionsFuture;
        
        if (themeFilter != null) {
            // Try to convert theme name to theme ID
            String themeId = themeFilter.toUpperCase();
            try {
                CollectionTheme theme = CollectionTheme.valueOf(themeId);
                collectionsFuture = collectionRepository.getCollectionsByTheme(theme.name());
                player.sendMessage(ChatColor.YELLOW + "⚙ " + ChatColor.BOLD + "Collections - " + theme.getDisplayName());
            } catch (IllegalArgumentException e) {
                player.sendMessage(ChatColor.RED + "✖ Unknown theme: " + themeFilter);
                listThemes(player);
                return;
            }
        } else {
            collectionsFuture = collectionRepository.getAllCollections();
            player.sendMessage(ChatColor.YELLOW + "⚙ " + ChatColor.BOLD + "All Available Collections");
        }
        
        collectionsFuture.thenAccept(collections -> {
            if (collections.isEmpty()) {
                player.sendMessage(ChatColor.YELLOW + "⚠ No collections available" + 
                    (themeFilter != null ? " for theme: " + themeFilter : ""));
                return;
            }
            
            player.sendMessage("");
            
            // For each collection, fetch progress data
            for (ItemCollectionDTO collection : collections) {
                // Fetch progress in parallel (will be very fast with cache)
                collectionRepository.getPlayerCollectionProgress(player.getUniqueId(), collection.getId())
                    .thenAccept(progress -> {
                        double completionPercent = progress * 100;
                        String status = completionPercent >= 100.0 ? 
                            ChatColor.GREEN + "✓" : 
                            ChatColor.YELLOW + String.format("%.0f%%", completionPercent);
                        
                        player.sendMessage(ChatColor.WHITE + collection.getName() + " " + 
                            ChatColor.GRAY + "(" + collection.getId() + ") " + status);
                        
                        if (collection.getDescription() != null && !collection.getDescription().isEmpty()) {
                            player.sendMessage(ChatColor.GRAY + "   " + collection.getDescription());
                        }
                        
                        if (collection.getThemeId() != null) {
                            try {
                                CollectionTheme theme = CollectionTheme.valueOf(collection.getThemeId());
                                player.sendMessage(ChatColor.GRAY + "   Theme: " + theme.getDisplayName());
                            } catch (IllegalArgumentException e) {
                                // Theme not found, skip display
                            }
                        }
                    });
            }
            
            player.sendMessage("");
            player.sendMessage(ChatColor.GRAY + "   Use " + ChatColor.WHITE + 
                "/lore collection view <id> " + ChatColor.GRAY + "for details");
            
        }).exceptionally(e -> {
            logger.error("Error fetching collections for player: " + player.getName(), e);
            player.sendMessage(ChatColor.RED + "✖ Error retrieving collection data.");
            return null;
        });
    }

    /**
     * View detailed information about a specific collection.
     */
    private void viewCollection(Player player, String collectionId) {
        collectionRepository.getCollectionById(collectionId)
            .thenAccept(collection -> {
                if (collection == null) {
                    player.sendMessage(ChatColor.RED + "✖ Collection not found: " + collectionId);
                    return;
                }
                
                player.sendMessage(ChatColor.YELLOW + "⚙ " + ChatColor.BOLD + collection.getName());
                
                if (collection.getDescription() != null && !collection.getDescription().isEmpty()) {
                    player.sendMessage(ChatColor.GRAY + collection.getDescription());
                }
                
                player.sendMessage("");
                
                // Show progress
                collectionRepository.getPlayerCollectionProgress(player.getUniqueId(), collection.getId())
                    .thenAccept(progress -> {
                        double completionPercent = progress * 100;
                        boolean isComplete = completionPercent >= 100.0;
                        
                        player.sendMessage(ChatColor.WHITE + "Progress: " + 
                            (isComplete ? ChatColor.GREEN + "✓ COMPLETE" : 
                            ChatColor.YELLOW + String.format("%.1f%%", completionPercent)));
                        
                        if (collection.getThemeId() != null) {
                            try {
                                CollectionTheme theme = CollectionTheme.valueOf(collection.getThemeId());
                                player.sendMessage(ChatColor.WHITE + "Theme: " + 
                                    ChatColor.GRAY + theme.getDisplayName());
                            } catch (IllegalArgumentException e) {
                                // Theme not found, skip display
                            }
                        }
                        
                        // Show item count if available
                        int itemCount = collection.getSerializedItems() != null ? 
                            collection.getSerializedItems().size() : 0;
                        player.sendMessage(ChatColor.WHITE + "Items: " + ChatColor.GRAY + itemCount);
                        
                        // Show completion date if available
                        if (isComplete && collection.getCompletionTime() > 0) {
                            String completionDate = DATE_FORMAT.format(
                                new Date(collection.getCompletionTime()));
                            player.sendMessage(ChatColor.WHITE + "Completed: " + 
                                ChatColor.GREEN + completionDate);
                        }
                        
                        // If complete, show claim instructions
                        if (isComplete) {
                            player.sendMessage("");
                            player.sendMessage(ChatColor.GREEN + "✓ Collection Complete!");
                            player.sendMessage(ChatColor.GRAY + "   Use " + ChatColor.WHITE + 
                                "/lore collection claim " + collection.getId() + 
                                ChatColor.GRAY + " to claim rewards");
                        }
                    });
            })
            .exceptionally(e -> {
                logger.error("Error retrieving collection: " + collectionId, e);
                player.sendMessage(ChatColor.RED + "✖ Error retrieving collection data.");
                return null;
            });
    }

    /**
     * Allow players to claim rewards for a completed collection.
     */
    private void claimCollectionReward(Player player, String collectionId) {
        // First check if collection exists and is completed
        collectionRepository.getCollectionById(collectionId)
            .thenCompose(collection -> {
                if (collection == null) {
                    player.sendMessage(ChatColor.RED + "✖ Collection not found: " + collectionId);
                    return CompletableFuture.completedFuture(false);
                }
                
                // Check progress
                return collectionRepository.getPlayerCollectionProgress(player.getUniqueId(), collectionId)
                    .thenCompose(progress -> {
                        if (progress < 1.0) {
                            player.sendMessage(ChatColor.YELLOW + "⚠ You must complete the collection to claim rewards.");
                            return CompletableFuture.completedFuture(false);
                        }
                        
                        // Mark as claimed with completion timestamp if not already claimed
                        long now = System.currentTimeMillis();
                        return collectionRepository.markCollectionCompleted(player.getUniqueId(), collectionId, now);
                    });
            })
            .thenAccept(success -> {
                if (success) {
                    // Call item manager to grant rewards
                    CollectionManager collectionManager = plugin.getLoreManager().getItemManager().getCollectionManager();
                    collectionManager.grantCollectionReward(player.getUniqueId(), collectionId);
                    
                    player.sendMessage(ChatColor.GREEN + "✓ Rewards claimed for collection: " + collectionId);
                }
            })
            .exceptionally(e -> {
                logger.error("Error claiming collection rewards: " + collectionId, e);
                player.sendMessage(ChatColor.RED + "✖ Error claiming collection rewards.");
                return null;
            });
    }

    /**
     * Show detailed progress for all collections.
     */
    private void showProgress(Player player) {
        player.sendMessage(ChatColor.YELLOW + "⚙ " + ChatColor.BOLD + "Your Collection Progress");
        player.sendMessage("");
        
        collectionRepository.getPlayerCollections(player.getUniqueId())
            .thenAccept(collections -> {
                if (collections.isEmpty()) {
                    player.sendMessage(ChatColor.YELLOW + "⚠ No collections available");
                    return;
                }
                
                for (ItemCollectionDTO collection : collections) {
                    double progress = collection.getProgress();
                    double percent = progress * 100;
                    
                    String status = percent >= 100.0 ? 
                        ChatColor.GREEN + "✓ COMPLETE" : 
                        ChatColor.YELLOW + String.format("%.1f%%", percent);
                    
                    player.sendMessage(ChatColor.WHITE + collection.getName() + ": " + status);
                    
                    if (percent < 100.0) {
                        int totalItems = collection.getSerializedItems() != null ? 
                            collection.getSerializedItems().size() : 0;
                        int ownedItems = (int) (totalItems * progress);
                        player.sendMessage(ChatColor.GRAY + "   " + ownedItems + "/" + totalItems + " items collected");
                    }
                }
            })
            .exceptionally(e -> {
                logger.error("Error retrieving collection progress for player: " + player.getName(), e);
                player.sendMessage(ChatColor.RED + "✖ Error retrieving collection progress data.");
                return null;
            });
    }

    /**
     * List all available themes.
     */
    private void listThemes(Player player) {
        player.sendMessage(ChatColor.YELLOW + "⚙ " + ChatColor.BOLD + "Available Themes");
        player.sendMessage("");
        
        Map<String, Integer> themeCounts = new HashMap<>();
        
        // Get all collections to count by theme
        collectionRepository.getAllCollections()
            .thenAccept(collections -> {
                // Count collections by theme
                for (ItemCollectionDTO collection : collections) {
                    if (collection.getThemeId() != null) {
                        themeCounts.merge(collection.getThemeId(), 1, Integer::sum);
                    }
                }
                
                // Display themes with counts
                for (CollectionTheme theme : CollectionTheme.values()) {
                    int count = themeCounts.getOrDefault(theme.name(), 0);
                    if (count > 0) {
                        player.sendMessage(ChatColor.WHITE + theme.getDisplayName() + " " + 
                            ChatColor.GRAY + "(" + count + " collections)");
                        player.sendMessage(ChatColor.GRAY + "   " + theme.getDescription());
                    }
                }
                
                player.sendMessage("");
                player.sendMessage(ChatColor.GRAY + "   Use " + ChatColor.WHITE + 
                    "/lore collection theme <name> " + ChatColor.GRAY + "to view theme collections");
            })
            .exceptionally(e -> {
                logger.error("Error listing themes", e);
                player.sendMessage(ChatColor.RED + "✖ Error retrieving theme data.");
                return null;
            });
    }

    /**
     * Show collections for a specific theme.
     */
    private void showThemeCollections(Player player, String themeName) {
        try {
            // Try to convert theme name to theme ID
            String themeId = themeName.toUpperCase();
            CollectionTheme theme = CollectionTheme.valueOf(themeId);
            listCollections(player, themeId);
        } catch (IllegalArgumentException e) {
            player.sendMessage(ChatColor.RED + "✖ Unknown theme: " + themeName);
            listThemes(player);
        }
    }

    /**
     * Show command usage information.
     */
    private void showUsage(Player player) {
        player.sendMessage(ChatColor.RED + "▶ Collection Commands:");
        player.sendMessage(ChatColor.WHITE + "/lore collection " + ChatColor.GRAY + "- Overview of all collections");
        player.sendMessage(ChatColor.WHITE + "/lore collection list [theme] " + ChatColor.GRAY + "- List collections");
        player.sendMessage(ChatColor.WHITE + "/lore collection view <id> " + ChatColor.GRAY + "- View collection details");
        player.sendMessage(ChatColor.WHITE + "/lore collection progress " + ChatColor.GRAY + "- Show your progress");
        player.sendMessage(ChatColor.WHITE + "/lore collection theme [name] " + ChatColor.GRAY + "- Browse by theme");
        player.sendMessage(ChatColor.WHITE + "/lore collection claim <id> " + ChatColor.GRAY + "- Claim collection rewards");
    }

    @Override
    public List<String> getTabCompletions(CommandSender sender, String[] args) {
        List<String> completions = new ArrayList<>();
        
        if (args.length == 1) {
            // Add main subcommands
            completions.add("view");
            completions.add("claim");
            completions.add("list");
            completions.add("progress");
            completions.add("theme");
            
            // Add registered subcommands
            for (String cmd : subCommands.keySet()) {
                if (subCommands.get(cmd).hasPermission(sender)) {
                    completions.add(cmd);
                }
            }
            
            // Filter by partial input
            String partial = args[0].toLowerCase();
            completions.removeIf(cmd -> !cmd.toLowerCase().startsWith(partial));
            
            return completions;
        } else if (args.length == 2) {
            // For theme and collection ID completions
            String subCommand = args[0].toLowerCase();
            String partial = args[1].toLowerCase();
            
            // Handle subcommand delegation
            if (subCommands.containsKey(subCommand)) {
                SubCommand subCmdObj = subCommands.get(subCommand);
                if (subCmdObj.hasPermission(sender)) {
                    return subCmdObj.getTabCompletions(sender, Arrays.copyOfRange(args, 1, args.length));
                }
            }
            
            switch (subCommand) {
                case "theme":
                    // Add theme names for tab completion
                    for (CollectionTheme theme : CollectionTheme.values()) {
                        String themeName = theme.name().toLowerCase();
                        if (themeName.startsWith(partial)) {
                            completions.add(themeName);
                        }
                    }
                    break;
                    
                case "view":
                case "claim":
                    // Load collections async and add IDs for tab completion later
                    // This is just a placeholder - in real implementation you'd want to cache this
                    if (sender instanceof Player) {
                        Player player = (Player) sender;
                        collectionRepository.getPlayerCollections(player.getUniqueId())
                            .thenAccept(collections -> {
                                for (ItemCollectionDTO collection : collections) {
                                    if (collection.getId().toLowerCase().startsWith(partial)) {
                                        completions.add(collection.getId());
                                    }
                                }
                            });
                    }
                    break;
            }
        }
        
        return completions;
    }

    @Override
    public String getDescription() {
        return "Manage and view item collections";
    }
}
