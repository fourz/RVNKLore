package org.fourz.RVNKLore.command;

import org.bukkit.command.CommandSender;
import org.fourz.RVNKLore.RVNKLore;
import org.fourz.RVNKLore.command.output.DisplayFactory;
import org.fourz.RVNKLore.command.subcommand.SubCommand;
import org.fourz.RVNKLore.data.DatabaseManager;
import org.fourz.RVNKLore.data.dto.ItemPropertiesDTO;
import org.fourz.RVNKLore.debug.LogManager;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

/**
 * Handles the /lore item info <item_name> command.
 * Displays detailed information about a registered lore item using DisplayFactory.
 * Also supports lookup by UUID or short UUID.
 * Uses async database methods for retrieving data.
 */
public class LoreItemInfoSubCommand implements SubCommand {
    private final LogManager logger;
    private final DatabaseManager databaseManager;
    private final RVNKLore plugin;
    
    public LoreItemInfoSubCommand(RVNKLore plugin) {
        this.plugin = plugin;
        this.logger = LogManager.getInstance(plugin, "LoreItemInfoSubCommand");
        this.databaseManager = plugin.getDatabaseManager();
    }

    public LoreItemInfoSubCommand(RVNKLore plugin, org.fourz.RVNKLore.lore.item.ItemManager itemManager) {
        // Legacy constructor - redirect to primary constructor
        this(plugin);
    }

    @Override
    public boolean hasPermission(CommandSender sender) {
        return sender.hasPermission("rvnklore.admin.item.give") || sender.hasPermission("rvnklore.command.collection");
    }

    @Override
    public boolean execute(CommandSender sender, String[] args) {
        if (args.length == 0) {
            if (databaseManager == null) {
                sender.sendMessage(org.bukkit.ChatColor.RED + "✖ Database system is not available. Please try again later.");
                logger.error("DatabaseManager is null when trying to list items", null);
                return true;
            }
            
            // List all items using async database method
            databaseManager.getAllItems().thenAccept(items -> {
                List<String> itemNames = new ArrayList<>();
                for (ItemPropertiesDTO item : items) {
                    itemNames.add(item.getDisplayName());
                }
                DisplayFactory.displayPaginatedList(
                    sender, 
                    "Available Items", 
                    itemNames, 
                    1, 
                    50, 
                    s -> org.bukkit.ChatColor.YELLOW + " - " + s
                );
            }).exceptionally(e -> {
                logger.error("Error retrieving items for info command", e);
                sender.sendMessage(org.bukkit.ChatColor.RED + "✖ An error occurred while retrieving items.");
                return null;
            });
            
            return true;
        }
        
        if (args.length > 1) {
            sender.sendMessage(org.bukkit.ChatColor.RED + "▶ Usage: /lore item info <item_name>");
            sender.sendMessage(org.bukkit.ChatColor.GRAY + "   Display information about a registered item");
            return true;
        }
        
        String itemNameOrId = args[0];
        
        if (databaseManager == null) {
            sender.sendMessage(org.bukkit.ChatColor.RED + "✖ Database system is not available. Please try again later.");
            logger.error("DatabaseManager is null when trying to get item info: " + itemNameOrId, null);
            return true;
        }

        // Try to match by UUID or short UUID for LoreEntry
        try {
            // First try as full UUID
            try {
                UUID uuid = UUID.fromString(itemNameOrId);
                databaseManager.getLoreEntryById(uuid).thenAccept(entryDTO -> {
                    if (entryDTO != null) {
                        // Convert DTO to domain object
                        org.fourz.RVNKLore.lore.LoreEntry loreEntry = entryDTO.toLoreEntry();
                        DisplayFactory.displayLoreEntry(sender, loreEntry);
                    } else {
                        displayItemByName(sender, itemNameOrId);
                    }
                }).exceptionally(e -> {
                    logger.error("Error retrieving lore entry by UUID: " + itemNameOrId, e);
                    displayItemByName(sender, itemNameOrId);
                    return null;
                });
                return true;
            } catch (IllegalArgumentException e) {
                // Not a valid UUID, continue to next check
            }
            
            // Try as a short UUID (first 8 characters)
            if (itemNameOrId.length() >= 8) {
                final String shortId = itemNameOrId.substring(0, Math.min(8, itemNameOrId.length()));
                
                // Get all lore entries and filter by short UUID
                CompletableFuture<List<org.fourz.RVNKLore.data.dto.LoreEntryDTO>> entriesFuture = 
                    databaseManager.getAllLoreEntries();
                
                entriesFuture.thenAccept(entries -> {
                    boolean found = false;
                    for (var entryDTO : entries) {
                        String entryId = entryDTO.getUuidString();
                        if (entryId != null && entryId.startsWith(shortId)) {
                            // Found a match by short UUID
                            org.fourz.RVNKLore.lore.LoreEntry loreEntry = entryDTO.toLoreEntry();
                            DisplayFactory.displayLoreEntry(sender, loreEntry);
                            found = true;
                            break;
                        }
                    }
                    
                    if (!found) {
                        // No match found by UUID, try by name
                        displayItemByName(sender, itemNameOrId);
                    }
                }).exceptionally(e -> {
                    logger.error("Error retrieving lore entries for short UUID match: " + shortId, e);
                    displayItemByName(sender, itemNameOrId);
                    return null;
                });
                
                return true;
            }
            
            // Not a UUID or short UUID, try by name
            displayItemByName(sender, itemNameOrId);
            return true;
            
        } catch (Exception e) {
            logger.error("Error processing item info request: " + itemNameOrId, e);
            sender.sendMessage(org.bukkit.ChatColor.RED + "✖ An error occurred while retrieving item information.");
            return true;
        }
    }
    
    private void displayItemByName(CommandSender sender, String itemName) {
        // Try to get the item by name and display it
        databaseManager.getAllItems().thenAccept(items -> {
            ItemPropertiesDTO matchedItem = null;
            for (ItemPropertiesDTO dto : items) {
                if (dto.getDisplayName().equalsIgnoreCase(itemName)) {
                    matchedItem = dto;
                    break;
                }
            }
            
            if (matchedItem != null) {
                org.fourz.RVNKLore.lore.item.ItemProperties properties = matchedItem.toItemProperties();
                org.bukkit.inventory.ItemStack item = new org.bukkit.inventory.ItemStack(properties.getMaterial());
                org.bukkit.inventory.meta.ItemMeta meta = item.getItemMeta();
                if (meta != null) {
                    meta.setDisplayName(properties.getDisplayName());
                    meta.setLore(properties.getLore());
                    if (properties.getCustomModelData() > 0) {
                        meta.setCustomModelData(properties.getCustomModelData());
                    }
                    item.setItemMeta(meta);
                }
                DisplayFactory.displayItem(sender, item, itemName);
            } else {
                sender.sendMessage(org.bukkit.ChatColor.RED + "✖ Item not found: " + itemName);
            }
        }).exceptionally(e -> {
            logger.error("Error retrieving item by name: " + itemName, e);
            sender.sendMessage(org.bukkit.ChatColor.RED + "✖ An error occurred while retrieving item information.");
            return null;
        });
    }

    @Override
    public String getDescription() {
        return "Get information about a lore item by name or ID.";
    }

    @Override
    public List<String> getTabCompletions(CommandSender sender, String[] args) {
        List<String> completions = new ArrayList<>();
        
        if (args.length == 1 && databaseManager != null) {
            CompletableFuture<List<ItemPropertiesDTO>> future = databaseManager.getAllItems();
            future.thenAccept(items -> {
                for (ItemPropertiesDTO dto : items) {
                    completions.add(dto.getDisplayName());
                }
            }).exceptionally(e -> {
                logger.error("Error getting item names for tab completion", e);
                return null;
            });
            
            // Since we're in a synchronous context, we need to wait for the async operation
            try {
                future.get(); // Wait for the operation to complete
            } catch (Exception e) {
                logger.error("Error waiting for item names", e);
            }
        }
        
        return completions;
    }
}
